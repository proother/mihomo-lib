name: Release

on:
  # (1) Manual trigger
  workflow_dispatch:
    inputs:
      tag:
        description: "Git Tag to checkout (e.g. v1.2.3)"
        required: true
        type: string
      delete_if_exists:
        description: "If 'true', delete existing release/tag before recreating"
        required: false
        type: boolean
        default: false

  # (2) Daily cron job at 12:10 UTC
  schedule:
    - cron: "10 12 * * *"

jobs:
  release:
    runs-on: macos-latest
    steps:
      ####################################################
      # 1) Get stable latest Mihomo release (only if triggered by schedule)
      ####################################################
      - name: Get stable latest Mihomo release
        if: ${{ github.event_name == 'schedule' }}
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            // This excludes prereleases/drafts automatically
            const { data: latest } = await github.rest.repos.getLatestRelease({
              owner: 'MetaCubeX',
              repo: 'mihomo'
            })
            core.setOutput('latest_tag', latest.tag_name)

      ####################################################
      # 2) Define the TAG
      ####################################################
      - name: Define TAG
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "TAG=${{ steps.get_latest_release.outputs.latest_tag }}" >> $GITHUB_ENV
          else
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          fi
        shell: bash

      ####################################################
      # 2.1) Debug release list in proother/mihomo-lib (or your chosen repo)
      ####################################################
      - name: Debug release list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          brew update
          brew install jq gh

          echo "Listing all releases (JSON) in proother/mihomo-lib:"
          # NOTE: If you want to list releases from the same repo as the workflow,
          #       remove "-R proother/mihomo-lib"
          gh api repos/proother/mihomo-lib/releases \
            --paginate \
            --jq '.[] | [.tag_name, .isDraft, .isPrerelease] | @tsv'

      ####################################################
      # 3) Check if release already exists in proother/mihomo-lib
      ####################################################
      - name: Check if release already exists
        id: check_existing_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== [DEBUG] Checking for existing release in proother/mihomo-lib..."
          echo "TAG='${TAG}' (length=${#TAG})"
      
          echo "=== gh release list (showing hidden chars) ==="
          gh release list --json tagName -R proother/mihomo-lib --limit 100 | od -c

          existing_release=$(
            gh release list --json tagName -R proother/mihomo-lib --limit 100 \
              | jq -r '.[].tagName' \
              | grep -x "${TAG}" \
              | wc -l
          )
      
          if [ "$existing_release" -gt 0 ]; then
            echo "Release/tag '${TAG}' already exists. Skipping."
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          fi

      ####################################################
      # 3.1) Conditionally delete the existing release if user wants that
      ####################################################
      - name: Delete existing release if user requested
        if: >
          github.event_name == 'workflow_dispatch' &&
          env.SKIP_RELEASE == 'true' &&
          github.event.inputs.delete_if_exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Deleting existing release '${TAG}' from proother/mihomo-lib..."
          gh release delete "${TAG}" -R proother/mihomo-lib -y
          echo "Successfully deleted release '${TAG}'."
          # Proceed with creation
          echo "SKIP_RELEASE=false" >> $GITHUB_ENV

      ####################################################
      # 4) Stop job if release still exists
      ####################################################
      - name: Stop job if release already exists
        if: env.SKIP_RELEASE == 'true'
        run: |
          echo "Nothing to do. Release/tag '${{ env.TAG }}' already found."

      ####################################################
      # 4.1) Checkout current repository
      #      (So we have a valid git repo for auto-commit, if needed)
      ####################################################
      - name: Checkout current repository
        if: env.SKIP_RELEASE == 'false'
        uses: actions/checkout@v4
        with:
          # By default, this checks out the same repo where the workflow runs
          # e.g. proother/mihomo-lib. 
          fetch-depth: 0

      ####################################################
      # 5) Check out the Mihomo source in subfolder `mihomo/`
      ####################################################
      - name: Checkout Mihomo
        if: env.SKIP_RELEASE == 'false'
        uses: actions/checkout@v4
        with:
          repository: 'MetaCubeX/mihomo'
          path: 'mihomo'
          ref: ${{ env.TAG }}
          submodules: 'recursive'
          fetch-depth: 0

      ####################################################
      # 6) Setup Go
      ####################################################
      - name: Setup Go
        if: env.SKIP_RELEASE == 'false'
        uses: actions/setup-go@v5
        with:
          go-version: '^1.23'

      ####################################################
      # 7) Build a universal macOS binary (amd64 + arm64)
      ####################################################
      - name: Build macOS universal binary
        run: |
          cd mihomo
          mkdir -p build/macos-amd64 build/macos-arm64
      
          # 1) macOS/amd64
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 \
            go build -v -tags "with_gvisor" -trimpath \
            -o build/macos-amd64/mihomo \
            .
      
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 \
            go build -v -tags "with_gvisor" -trimpath \
            -o build/macos-arm64/mihomo \
            .
      
          lipo -create \
            -output build/mihomo-universal \
            build/macos-amd64/mihomo \
            build/macos-arm64/mihomo
      
          cd build
          zip -ry Mihomo-macos-universal.zip mihomo-universal

      ####################################################
      # 8) Calculate shasum
      ####################################################
      - name: Detect checksum
        if: env.SKIP_RELEASE == 'false'
        run: |
          export TEMP="$(shasum -a 256 mihomo/build/Mihomo-macos-universal.zip)"
          export CHECKSUM="${TEMP:0:64}"
          echo "FILE_CHECKSUM=${CHECKSUM}" >> $GITHUB_ENV

      ####################################################
      # 9) (Optional) You can update a file in your repo if needed
      #    e.g. to store checksums, versions, etc.
      #    Otherwise, you can skip the commit step.
      ####################################################
      - name: Commit package update
        if: env.SKIP_RELEASE == 'false'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Mihomo macOS Release ${TAG}"
          commit_user_name: "proother"
          commit_user_email: "proother@github.com"
          # If you have a file_pattern to update, specify it here
          file_pattern: 'Package.swift'
          # Or remove this step altogether if you donâ€™t need it

      ####################################################
      # 10) Create a new GitHub Release in proother/mihomo-lib
      ####################################################
      - name: Upload Release
        if: env.SKIP_RELEASE == 'false'
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          tag_name: ${{ env.TAG }}
          body: "Compiled from Mihomo source tag: ${{ env.TAG }} for macOS (universal binary)."
          files: "mihomo/build/Mihomo-macos-universal.zip"
