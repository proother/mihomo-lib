name: Build and Release Mihomo

on:
  # (1) Manual trigger
  workflow_dispatch:
    inputs:
      tag:
        description: "Git Tag to checkout (e.g. v1.19.3)"
        required: true
        type: string
      delete_if_exists:
        description: "If 'true', delete existing release/tag before recreating"
        required: false
        type: boolean
        default: false

  # (2) Daily cron job at 12:10 UTC
  schedule:
    - cron: "10 12 * * *"

env:
  REGISTRY: docker.io

jobs:
  release:
    # Ensure GITHUB_TOKEN has permission to create releases
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      # 1) Get the latest Mihomo release (only when triggered by schedule)
      - name: Get latest Mihomo release
        if: ${{ github.event_name == 'schedule' }}
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            // Automatically excludes prereleases/drafts
            const { data: latest } = await github.rest.repos.getLatestRelease({
              owner: 'MetaCubeX',
              repo: 'mihomo'
            })
            core.setOutput('latest_tag', latest.tag_name)

      # 2) Define TAG
      - name: Define TAG
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "TAG=${{ steps.get_latest_release.outputs.latest_tag }}" >> $GITHUB_ENV
          else
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          fi
        shell: bash

      # 3) Check if release already exists
      - name: Check if release already exists
        id: check_existing_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          brew update
          which gh >/dev/null 2>&1 || brew install gh
          which jq >/dev/null 2>&1 || brew install jq
          
          echo "=== [DEBUG] Checking if release exists ==="
          echo "TAG='${TAG}' (length=${#TAG})"
      
          existing_release=$(
            gh release list --json tagName --limit 100 \
              | jq -r '.[].tagName' \
              | grep -x "${TAG}" \
              | wc -l
          )
      
          if [ "$existing_release" -gt 0 ]; then
            echo "Release/tag '${TAG}' already exists. Skipping."
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          fi

      # 3.1) Delete existing release if requested by user
      - name: Delete existing release if requested
        if: >
          github.event_name == 'workflow_dispatch' &&
          env.SKIP_RELEASE == 'true' &&
          github.event.inputs.delete_if_exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Deleting existing release '${TAG}'..."
          gh release delete "${TAG}" -y --cleanup-tag 
          echo "Successfully deleted release '${TAG}'."
          echo "SKIP_RELEASE=false" >> $GITHUB_ENV

      # 4) Stop job if release already exists
      - name: Stop job if release already exists
        if: env.SKIP_RELEASE == 'true'
        run: |
          echo "Nothing to do. Release/tag '${{ env.TAG }}' already exists."

      # 5) Checkout Mihomo code
      - name: Checkout Mihomo code
        if: env.SKIP_RELEASE == 'false'
        uses: actions/checkout@v4
        with:
          repository: 'MetaCubeX/mihomo'
          ref: ${{ env.TAG }}
          submodules: 'recursive'
          fetch-depth: 0

      # 6) Setup Go environment
      - name: Setup Go environment
        if: env.SKIP_RELEASE == 'false'
        uses: actions/setup-go@v5
        with:
          go-version: '^1.24'
          cache: true

      # 7) Build macOS universal binary
      - name: Build macOS universal binary
        if: env.SKIP_RELEASE == 'false'
        run: |
          # Prepare build directories
          mkdir -p build/{darwin-amd64,darwin-arm64}
          
          # Build amd64 version
          GOARCH=amd64 GOOS=darwin GOAMD64=v3 CGO_ENABLED=0 \
            go build -tags "with_gvisor" -trimpath \
            -ldflags '-X "github.com/metacubex/mihomo/constant.Version=${{ env.TAG }}" \
            -X "github.com/metacubex/mihomo/constant.BuildTime=$(date -u)" \
            -w -s -buildid=' \
            -o build/darwin-amd64/mihomo .
          
          # Build arm64 version
          GOARCH=arm64 GOOS=darwin CGO_ENABLED=0 \
            go build -tags "with_gvisor" -trimpath \
            -ldflags '-X "github.com/metacubex/mihomo/constant.Version=${{ env.TAG }}" \
            -X "github.com/metacubex/mihomo/constant.BuildTime=$(date -u)" \
            -w -s -buildid=' \
            -o build/darwin-arm64/mihomo .
          
          # Merge using lipo into universal binary
          lipo -create \
            -arch arm64 build/darwin-arm64/mihomo \
            -arch x86_64 build/darwin-amd64/mihomo \
            -output build/mihomo-darwin-universal
          
          # Package
          cd build
          chmod +x mihomo-darwin-universal
          zip -ry mihomo-darwin-universal-${{ env.TAG }}.zip mihomo-darwin-universal
          
          # Calculate checksum
          DARWIN_CHECKSUM=$(shasum -a 256 mihomo-darwin-universal-${{ env.TAG }}.zip | cut -d ' ' -f 1)
          echo "DARWIN_CHECKSUM=${DARWIN_CHECKSUM}" >> $GITHUB_ENV

      # 8) Build iOS binary (not implemented, can be added as needed)
      # This part can reference the iOS build section in singbox-workflow.yml
      
      # 9) Create GitHub release
      - name: Create GitHub release
        if: env.SKIP_RELEASE == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          draft: false
          body: |
            Built from Mihomo source tag: ${{ env.TAG }}
            
            ### macOS Universal Binary (mihomo-darwin-universal-${{ env.TAG }}.zip)
            SHA256: ${{ env.DARWIN_CHECKSUM }}
          files: |
            build/mihomo-darwin-universal-${{ env.TAG }}.zip
