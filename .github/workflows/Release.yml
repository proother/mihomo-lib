name: iOS-Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Git Tag to create or use (e.g. v1.2.3)"
        required: true
        type: string
      delete_if_exists:
        description: "If 'true', delete existing release/tag before recreating."
        required: false
        type: boolean
        default: false
  schedule:
    - cron: "10 12 * * *"

jobs:
  release:
    runs-on: macos-latest

    steps:
      # 1) Checkout the current repository so that we have a .git folder
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) (Optional) If triggered by schedule, fetch the latest official release tag from some other repo.
      #    Otherwise, use the user-provided "tag" input.
      #    If you want the latest release from *this same repo*, just adapt the code below.

      - name: Get latest release from MetaCubeX/mihomo (only on schedule)
        if: ${{ github.event_name == 'schedule' }}
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: latest } = await github.rest.repos.getLatestRelease({
              owner: 'MetaCubeX',
              repo: 'mihomo'
            })
            core.setOutput('latest_tag', latest.tag_name)

      - name: Define TAG
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "TAG=${{ steps.get_latest_release.outputs.latest_tag }}" >> $GITHUB_ENV
          else
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          fi
        shell: bash

      # 3) Debug: show existing releases in THIS repository (since we already checked it out, .git exists).
      #    If you actually want to see releases from a DIFFERENT repo, do:
      #      gh release list -R SomeUser/SomeRepo
      #
      - name: Debug release list
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          brew install jq gh
          echo "Listing releases in the current repo ${{ github.repository }} (JSON):"
          gh release list --json tagName,draft,prerelease --limit 100

      # 4) Setup Go (so that 'go' is available before we run go mod / go build)
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.23'

      # 5) Check if release/tag already exists, optionally delete
      - name: Check if release already exists
        id: check_existing_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "TAG='${TAG}'"
          existing_release=$(
            gh release list --json tagName --limit 100 \
              | jq -r '.[].tagName' \
              | grep -x "${TAG}" \
              | wc -l
          )
          if [ "$existing_release" -gt 0 ]; then
            echo "Release '${TAG}' already exists."
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          fi

      - name: Delete existing release if user requested
        if: >
          github.event_name == 'workflow_dispatch' &&
          env.SKIP_RELEASE == 'true' &&
          github.event.inputs.delete_if_exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Deleting existing release '${TAG}'..."
          gh release delete "${TAG}" -y
          echo "Successfully deleted release '${TAG}'."
          echo "SKIP_RELEASE=false" >> $GITHUB_ENV

      - name: Stop if release still exists
        if: env.SKIP_RELEASE == 'true'
        run: echo "Nothing to do. Release/tag '${{ env.TAG }}' already found."

      # ============ Only run build steps if SKIP_RELEASE == false ============

      # 6) Remove/patch go-m1cpu (which fails on iOS)
      - name: Remove/patch go-m1cpu
        if: env.SKIP_RELEASE == 'false'
        run: |
          # Example replacement/patch approach
          go mod edit -replace github.com/shoenig/go-m1cpu=github.com/shoenig/go-m1cpu@v0.1.5
          go mod tidy
          echo "Patched go-m1cpu usage."

      # 7) Install iOS build dependencies
      - name: Install iOS build deps
        if: env.SKIP_RELEASE == 'false'
        run: |
          # Example: installing gomobile, etc.
          go install golang.org/x/mobile/cmd/gomobile@latest
          go install golang.org/x/mobile/cmd/gobind@latest
          gomobile init

      # 8) Build the XCFramework
      - name: Build XCFramework
        if: env.SKIP_RELEASE == 'false'
        run: |
          # Replace with the actual build commands for Mihomo iOS libs.
          # Example only:
          go run ./cmd/internal/build_lib -target apple -platform ios -output Mihomo.xcframework
          zip -ry Mihomo.xcframework.zip Mihomo.xcframework

      # 9) Calculate checksum
      - name: Calculate checksum
        if: env.SKIP_RELEASE == 'false'
        run: |
          SUM="$(shasum -a 256 Mihomo.xcframework.zip)"
          CHECKSUM="${SUM:0:64}"
          echo "FILE_CHECKSUM=${CHECKSUM}" >> $GITHUB_ENV

      # 10) Generate or update Package.swift
      - name: Update Package.swift
        if: env.SKIP_RELEASE == 'false'
        run: |
          echo "// swift-tools-version: 5.7" > Package.swift
          echo "" >> Package.swift
          echo "import PackageDescription" >> Package.swift
          echo "" >> Package.swift
          echo "let package = Package(" >> Package.swift
          echo "  name: \"Mihomo\"," >> Package.swift
          echo "  platforms: [.iOS(.v12)]," >> Package.swift
          echo "  products: [" >> Package.swift
          echo "    .library(name: \"Mihomo\", targets: [\"Mihomo\"])" >> Package.swift
          echo "  ]," >> Package.swift
          echo "  targets: [" >> Package.swift
          echo "    .binaryTarget(" >> Package.swift
          echo "      name: \"Mihomo\"," >> Package.swift
          echo "      url: \"https://github.com/${{ github.repository }}/releases/download/${TAG}/Mihomo.xcframework.zip\"," >> Package.swift
          echo "      checksum: \"${FILE_CHECKSUM}\"" >> Package.swift
          echo "    )" >> Package.swift
          echo "  ]" >> Package.swift
          echo ")" >> Package.swift

      # 11) Commit the Package.swift update
      - name: Commit package update
        if: env.SKIP_RELEASE == 'false'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Mihomo Release ${TAG}"
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
          tagging_message: "${TAG}"
          file_pattern: 'Package.swift'

      # 12) Create or update the release with the zipped .xcframework
      - name: Create GitHub Release
        if: env.SKIP_RELEASE == 'false'
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          tag_name: ${{ env.TAG }}
          body: "Mihomo iOS XCFramework built from tag: ${{ env.TAG }}"
          files: "Mihomo.xcframework.zip"
