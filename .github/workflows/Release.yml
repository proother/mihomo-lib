name: Build and Release Mihomo

on:
  # (1) Manual trigger
  workflow_dispatch:
    inputs:
      tag:
        description: "Git Tag to checkout (e.g. v1.19.3)"
        required: true
        type: string
      delete_if_exists:
        description: "If 'true', delete existing release/tag before recreating"
        required: false
        type: boolean
        default: false

  # (2) Daily cron job at 12:10 UTC
  schedule:
    - cron: "10 12 * * *"

env:
  REGISTRY: docker.io

jobs:
  release:
    # Ensure GITHUB_TOKEN has permission to create releases
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      # 1) Get the latest Mihomo release (only when triggered by schedule)
      - name: Get latest Mihomo release
        if: ${{ github.event_name == 'schedule' }}
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            // Automatically excludes prereleases/drafts
            const { data: latest } = await github.rest.repos.getLatestRelease({
              owner: 'MetaCubeX',
              repo: 'mihomo'
            })
            core.setOutput('latest_tag', latest.tag_name)

      # 2) Define TAG
      - name: Define TAG
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "TAG=${{ steps.get_latest_release.outputs.latest_tag }}" >> $GITHUB_ENV
          else
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          fi
        shell: bash

      # 3) Check if release already exists
      - name: Check if release already exists
        id: check_existing_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          brew update
          which gh >/dev/null 2>&1 || brew install gh
          which jq >/dev/null 2>&1 || brew install jq
          
          echo "=== [DEBUG] Checking if release exists ==="
          echo "TAG='${TAG}' (length=${#TAG})"
      
          existing_release=$(
            gh release list --json tagName --limit 100 \
              | jq -r '.[].tagName' \
              | grep -x "${TAG}" \
              | wc -l
          )
      
          if [ "$existing_release" -gt 0 ]; then
            echo "Release/tag '${TAG}' already exists. Skipping."
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
          fi

      # 3.1) Delete existing release if requested by user
      - name: Delete existing release if requested
        if: >
          github.event_name == 'workflow_dispatch' &&
          env.SKIP_RELEASE == 'true' &&
          github.event.inputs.delete_if_exists == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Deleting existing release '${TAG}'..."
          gh release delete "${TAG}" -y --cleanup-tag 
          echo "Successfully deleted release '${TAG}'."
          echo "SKIP_RELEASE=false" >> $GITHUB_ENV

      # 4) Stop job if release already exists
      - name: Stop job if release already exists
        if: env.SKIP_RELEASE == 'true'
        run: |
          echo "Nothing to do. Release/tag '${{ env.TAG }}' already exists."

      # 5) Checkout Mihomo code
      - name: Checkout Mihomo code
        if: env.SKIP_RELEASE == 'false'
        uses: actions/checkout@v4
        with:
          repository: 'MetaCubeX/mihomo'
          ref: ${{ env.TAG }}
          submodules: 'recursive'
          fetch-depth: 0

      # 6) Setup Go environment
      - name: Setup Go environment
        if: env.SKIP_RELEASE == 'false'
        uses: actions/setup-go@v5
        with:
          go-version: '^1.24'
          cache: true

      # 7) Build macOS universal binary
      - name: Build macOS universal binary
        if: env.SKIP_RELEASE == 'false'
        run: |
          # Prepare build directories
          mkdir -p build/{darwin-amd64,darwin-arm64}
          
          # Set build time for consistent formatting
          BUILDTIME=$(date -u)
          LDFLAGS="-X 'github.com/metacubex/mihomo/constant.Version=${{ env.TAG }}' -X 'github.com/metacubex/mihomo/constant.BuildTime=${BUILDTIME}' -w -s -buildid="
          
          # Build amd64 version
          echo "Building amd64 version..."
          GOARCH=amd64 GOOS=darwin GOAMD64=v3 CGO_ENABLED=0 \
            go build -tags with_gvisor -trimpath \
            -ldflags "${LDFLAGS}" \
            -o build/darwin-amd64/mihomo
          
          # Build arm64 version
          echo "Building arm64 version..."
          GOARCH=arm64 GOOS=darwin CGO_ENABLED=0 \
            go build -tags with_gvisor -trimpath \
            -ldflags "${LDFLAGS}" \
            -o build/darwin-arm64/mihomo
          
          # Merge using lipo into universal binary
          echo "Creating universal binary with lipo..."
          lipo -create \
            -arch arm64 build/darwin-arm64/mihomo \
            -arch x86_64 build/darwin-amd64/mihomo \
            -output build/mihomo-darwin-universal
          
          # Package
          cd build
          chmod +x mihomo-darwin-universal
          zip -ry mihomo-darwin-universal-${{ env.TAG }}.zip mihomo-darwin-universal
          
          # Calculate checksum
          DARWIN_CHECKSUM=$(shasum -a 256 mihomo-darwin-universal-${{ env.TAG }}.zip | cut -d ' ' -f 1)
          echo "DARWIN_CHECKSUM=${DARWIN_CHECKSUM}" >> $GITHUB_ENV
          
          # Go back to the root directory
          cd ..

      # 8) Build Windows multi-architecture package
      - name: Build Windows binaries
        if: env.SKIP_RELEASE == 'false'
        run: |
          # Prepare build directories
          mkdir -p build/windows/{amd64,386,arm64}
          
          # Set build time for consistent formatting
          BUILDTIME=$(date -u)
          LDFLAGS="-X 'github.com/metacubex/mihomo/constant.Version=${{ env.TAG }}' -X 'github.com/metacubex/mihomo/constant.BuildTime=${BUILDTIME}' -w -s -buildid="
          
          # Build amd64 version
          echo "Building Windows amd64 version..."
          GOARCH=amd64 GOOS=windows GOAMD64=v3 CGO_ENABLED=0 \
            go build -tags with_gvisor -trimpath \
            -ldflags "${LDFLAGS}" \
            -o build/windows/amd64/mihomo.exe
          
          # Build 386 version
          echo "Building Windows 386 version..."
          GOARCH=386 GOOS=windows CGO_ENABLED=0 \
            go build -tags with_gvisor -trimpath \
            -ldflags "${LDFLAGS}" \
            -o build/windows/386/mihomo.exe
          
          # Build arm64 version
          echo "Building Windows arm64 version..."
          GOARCH=arm64 GOOS=windows CGO_ENABLED=0 \
            go build -tags with_gvisor -trimpath \
            -ldflags "${LDFLAGS}" \
            -o build/windows/arm64/mihomo.exe
          
          # Create package with all architectures
          cd build
          mkdir -p mihomo-windows-all
          cp windows/amd64/mihomo.exe mihomo-windows-all/mihomo-amd64.exe
          cp windows/386/mihomo.exe mihomo-windows-all/mihomo-386.exe
          cp windows/arm64/mihomo.exe mihomo-windows-all/mihomo-arm64.exe
          
          # Create readme file explaining the binaries
          echo "Mihomo Windows Binaries - ${{ env.TAG }}" > mihomo-windows-all/README.txt
          echo "" >> mihomo-windows-all/README.txt
          echo "This package contains Mihomo binaries for different Windows architectures:" >> mihomo-windows-all/README.txt
          echo "" >> mihomo-windows-all/README.txt
          echo "- mihomo-amd64.exe: For 64-bit Intel/AMD processors (most common)" >> mihomo-windows-all/README.txt
          echo "- mihomo-386.exe: For 32-bit Intel/AMD processors (older systems)" >> mihomo-windows-all/README.txt
          echo "- mihomo-arm64.exe: For ARM64 processors (newer Windows on ARM devices)" >> mihomo-windows-all/README.txt
          echo "" >> mihomo-windows-all/README.txt
          echo "Choose the appropriate version for your system." >> mihomo-windows-all/README.txt
          
          # Package all Windows binaries
          zip -ry mihomo-windows-all-${{ env.TAG }}.zip mihomo-windows-all
          
          # Calculate checksum
          WINDOWS_CHECKSUM=$(shasum -a 256 mihomo-windows-all-${{ env.TAG }}.zip | cut -d ' ' -f 1)
          echo "WINDOWS_CHECKSUM=${WINDOWS_CHECKSUM}" >> $GITHUB_ENV
          
          # Go back to the root directory
          cd ..

      # 9) Build Android multi-architecture package
      - name: Build Android binaries
        if: env.SKIP_RELEASE == 'false'
        run: |
          # Prepare build directories
          mkdir -p build/android/{arm64-v8a,armeabi-v7a,x86,x86_64}
          
          # Set build time for consistent formatting
          BUILDTIME=$(date -u)
          LDFLAGS="-X 'github.com/metacubex/mihomo/constant.Version=${{ env.TAG }}' -X 'github.com/metacubex/mihomo/constant.BuildTime=${BUILDTIME}' -w -s -buildid="
          
          # Build arm64-v8a version (arm64)
          echo "Building Android arm64-v8a version..."
          GOARCH=arm64 GOOS=android CGO_ENABLED=0 \
            go build -tags with_gvisor -trimpath \
            -ldflags "${LDFLAGS}" \
            -o build/android/arm64-v8a/mihomo
          
          # Build armeabi-v7a version (arm)
          echo "Building Android armeabi-v7a version..."
          GOARCH=arm GOOS=android GOARM=7 CGO_ENABLED=0 \
            go build -tags with_gvisor -trimpath \
            -ldflags "${LDFLAGS}" \
            -o build/android/armeabi-v7a/mihomo
          
          # Build x86 version
          echo "Building Android x86 version..."
          GOARCH=386 GOOS=android CGO_ENABLED=0 \
            go build -tags with_gvisor -trimpath \
            -ldflags "${LDFLAGS}" \
            -o build/android/x86/mihomo
          
          # Build x86_64 version
          echo "Building Android x86_64 version..."
          GOARCH=amd64 GOOS=android CGO_ENABLED=0 \
            go build -tags with_gvisor -trimpath \
            -ldflags "${LDFLAGS}" \
            -o build/android/x86_64/mihomo
          
          # Create package with all architectures
          cd build
          mkdir -p mihomo-android-all/lib
          
          # Copy binaries to appropriate directories following Android convention
          mkdir -p mihomo-android-all/lib/arm64-v8a
          mkdir -p mihomo-android-all/lib/armeabi-v7a
          mkdir -p mihomo-android-all/lib/x86
          mkdir -p mihomo-android-all/lib/x86_64
          
          cp android/arm64-v8a/mihomo mihomo-android-all/lib/arm64-v8a/
          cp android/armeabi-v7a/mihomo mihomo-android-all/lib/armeabi-v7a/
          cp android/x86/mihomo mihomo-android-all/lib/x86/
          cp android/x86_64/mihomo mihomo-android-all/lib/x86_64/
          
          # Create readme file explaining the Android ABI structure
          echo "Mihomo Android Binaries - ${{ env.TAG }}" > mihomo-android-all/README.txt
          echo "" >> mihomo-android-all/README.txt
          echo "This package contains Mihomo binaries for different Android architectures:" >> mihomo-android-all/README.txt
          echo "" >> mihomo-android-all/README.txt
          echo "- lib/arm64-v8a/: For 64-bit ARM devices (most modern phones/tablets)" >> mihomo-android-all/README.txt
          echo "- lib/armeabi-v7a/: For 32-bit ARM devices (older phones/tablets)" >> mihomo-android-all/README.txt
          echo "- lib/x86/: For 32-bit x86 Android devices (rare)" >> mihomo-android-all/README.txt
          echo "- lib/x86_64/: For 64-bit x86 Android devices (some tablets, Chrome OS)" >> mihomo-android-all/README.txt
          echo "" >> mihomo-android-all/README.txt
          echo "The directory structure follows the standard Android ABI layout." >> mihomo-android-all/README.txt
          
          # Package all Android binaries
          zip -ry mihomo-android-all-${{ env.TAG }}.zip mihomo-android-all
          
          # Calculate checksum
          ANDROID_CHECKSUM=$(shasum -a 256 mihomo-android-all-${{ env.TAG }}.zip | cut -d ' ' -f 1)
          echo "ANDROID_CHECKSUM=${ANDROID_CHECKSUM}" >> $GITHUB_ENV
          
          # Go back to the root directory
          cd ..

      # 10) Create GitHub release
      - name: Create GitHub release
        if: env.SKIP_RELEASE == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          draft: false
          body: |
            Built from Mihomo source tag: ${{ env.TAG }}
            
            ### macOS Universal Binary (mihomo-darwin-universal-${{ env.TAG }}.zip)
            SHA256: ${{ env.DARWIN_CHECKSUM }}
            
            ### Windows Multi-Architecture Package (mihomo-windows-all-${{ env.TAG }}.zip)
            SHA256: ${{ env.WINDOWS_CHECKSUM }}
            
            ### Android Multi-Architecture Package (mihomo-android-all-${{ env.TAG }}.zip)
            SHA256: ${{ env.ANDROID_CHECKSUM }}
          files: |
            build/mihomo-darwin-universal-${{ env.TAG }}.zip
            build/mihomo-windows-all-${{ env.TAG }}.zip
            build/mihomo-android-all-${{ env.TAG }}.zip
